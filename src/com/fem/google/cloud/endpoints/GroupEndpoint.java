package com.fem.google.cloud.endpoints;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Nullable;
import javax.inject.Named;
import javax.jdo.PersistenceManager;
import javax.jdo.Query;
import javax.persistence.EntityNotFoundException;

import com.google.api.server.spi.config.Api;
import com.google.api.server.spi.response.CollectionResponse;
import com.google.appengine.api.datastore.Cursor;
import com.google.appengine.datanucleus.query.JDOCursorHelper;

@Api(name = "groupendpoint")
public class GroupEndpoint {

	/**
	 * This method lists all the entities inserted in datastore.
	 * It uses HTTP GET method and paging support.
	 *
	 * @return A CollectionResponse class containing the list of all entities
	 * persisted and a cursor to the next page.
	 */
	@SuppressWarnings({ "unchecked", "unused" })
	public CollectionResponse<Group> listGroup(
			@Nullable @Named("cursor") String cursorString,
			@Nullable @Named("limit") Integer limit) {

		PersistenceManager mgr = null;
		Cursor cursor = null;
		List<Group> execute = null;

		try {
			mgr = getPersistenceManager();
			Query query = mgr.newQuery(Group.class);
			if (cursorString != null && cursorString != "") {
				cursor = Cursor.fromWebSafeString(cursorString);
				HashMap<String, Object> extensionMap = new HashMap<String, Object>();
				extensionMap.put(JDOCursorHelper.CURSOR_EXTENSION, cursor);
				query.setExtensions(extensionMap);
			}

			if (limit != null) {
				query.setRange(0, limit);
			}

			execute = (List<Group>) query.execute();
			cursor = JDOCursorHelper.getCursor(execute);
			if (cursor != null)
				cursorString = cursor.toWebSafeString();

			// Tight loop for fetching all entities from datastore and accomodate
			// for lazy fetch.
			for (Group obj : execute)
				;
		} finally {
			mgr.close();
		}

		return CollectionResponse.<Group> builder().setItems(execute)
				.setNextPageToken(cursorString).build();
	}

	/**
	 * This method gets the entity having primary key id. It uses HTTP GET method.
	 *
	 * @param id the primary key of the java bean.
	 * @return The entity with primary key id.
	 */
	public Group getGroup(@Named("id") String id) {
		PersistenceManager mgr = getPersistenceManager();
		Group group = null;
		try {
			group = mgr.getObjectById(Group.class, id);
		} finally {
			mgr.close();
		}
		return group;
	}

	/**
	 * This inserts a new entity into App Engine datastore. If the entity already
	 * exists in the datastore, an exception is thrown.
	 * It uses HTTP POST method.
	 *
	 * @param group the entity to be inserted.
	 * @return The inserted entity.
	 */
	public Group insertGroup(Group group) {
		PersistenceManager mgr = getPersistenceManager();
		try {
			//Commented cause when using autogenerated keys, this doesnt work.
			/*if (containsGroup(group)) {
				throw new EntityExistsException("Object already exists");
			}*/
			
			ArrayList<User> alMembersFromClient = group.getMembers();
			
			
			ArrayList<User> alTotalMembers = new ArrayList<User>();
			for (Iterator iterator = alMembersFromClient.iterator(); iterator.hasNext();) {
				User user = (User) iterator.next();
				if(user.getUserId()==null){
					//TODO : To put this in transaction
					 user = new UserEndpoint().getOrInsertUser(user);
				}
				alTotalMembers.add(user);
			}
			
			ArrayList<String> alMembersIdList = new ArrayList<String>();
			group.setMembers(null);
			for (Iterator iterator = alTotalMembers.iterator(); iterator.hasNext();) {
				User user = (User) iterator.next();
				alMembersIdList.add(user.getUserId());
			}
			//Pushing to databse since needs group id
			group.setMembersIdList(alMembersIdList);
			group = mgr.makePersistent(group);
			
			for (Iterator iterator = alTotalMembers.iterator(); iterator.hasNext();) {
				User user = (User) iterator.next();
				GroupMemberMapping objGroupMemberMapping = new GroupMemberMapping();
				objGroupMemberMapping.setGroupId(group.getGroupId());
				objGroupMemberMapping.setUserId(user.getUserId());
				//TODO : To put this in transaction
				new GroupMemberMappingEndpoint().insertGroupMemberMapping(objGroupMemberMapping);
			}
			
			this.generateIOUEntries(alTotalMembers, group);
			
		} finally {
			mgr.close();
		}
		return group;
	}

	
	private Object generateIOUEntries(ArrayList<User> allMembers, Group objGroup){
		
		for (int i = 0; i < allMembers.size(); i++) {

			User fromUser = allMembers.get(i);
			
			for (int j = i+1; j < allMembers.size(); j++) {
				User toUser = allMembers.get(j);
				
				IOU objIOU = new IOU();
				
				objIOU.setGroupId(objGroup.getGroupId());
				objIOU.setFromUserId(fromUser.getUserId());
				objIOU.setToUserId(toUser.getUserId());
				objIOU.setAmount(0);
				
				new IOUEndpoint().insertIOU(objIOU);
				
			}
		}
		
		
		return null;
		
	}
	
	/**
	 * This method is used for updating an existing entity. If the entity does not
	 * exist in the datastore, an exception is thrown.
	 * It uses HTTP PUT method.
	 *
	 * @param group the entity to be updated.
	 * @return The updated entity.
	 */
	public Group updateGroup(Group group) {
		PersistenceManager mgr = getPersistenceManager();
		try {
			if (!containsGroup(group)) {
				throw new EntityNotFoundException("Object does not exist");
			}
			mgr.makePersistent(group);
		} finally {
			mgr.close();
		}
		return group;
	}

	/**
	 * This method removes the entity with primary key id.
	 * It uses HTTP DELETE method.
	 *
	 * @param id the primary key of the entity to be deleted.
	 * @return The deleted entity.
	 */
	public Group removeGroup(@Named("id") Long id) {
		PersistenceManager mgr = getPersistenceManager();
		Group group = null;
		try {
			group = mgr.getObjectById(Group.class, id);
			mgr.deletePersistent(group);
		} finally {
			mgr.close();
		}
		return group;
	}

	private boolean containsGroup(Group group) {
		PersistenceManager mgr = getPersistenceManager();
		boolean contains = true;
		try {
			mgr.getObjectById(Group.class, group.getGroupId());
		} catch (javax.jdo.JDOObjectNotFoundException ex) {
			contains = false;
		} finally {
			mgr.close();
		}
		return contains;
	}

	private static PersistenceManager getPersistenceManager() {
		return PMF.get().getPersistenceManager();
	}

}
